---
import BaseLayout from "./BaseLayout.astro";
const { frontmatter } = Astro.props;
---

<button id="openModalButton">Table of Contents</button>
<div id="modalContainer" style="display: none;">
  <button id="closeModalButton">
    <svg version="1.2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 150 150" width="100%" height="100%"
      ><path
        class="a"
        d="m13.9 12.7c-4.4 4.3-8.3 8.9-8.6 10.3-0.5 2.2 2.5 5.5 24.3 27.2l24.9 24.8c-40.6 40.6-49.5 50.2-49.5 51.5 0 1.2 3.5 5.4 8.3 10.2 5.3 5.4 9 8.3 10.5 8.3 1.6 0 9.2-6.9 27-24.5l24.7-24.6c39.9 40 49.7 49.1 51 49.1 1.2 0 5.3-3.3 10.2-8.2 4.7-4.7 8.2-9.2 8.3-10.3 0-1.3-8.6-10.6-24.8-26.8l-24.7-24.9c44-42.9 49.5-48.9 49.5-50.8 0-1.8-2.2-4.8-8.2-10.7-4.6-4.5-9.1-8.2-10.2-8.3-1.1 0-11.2 9.2-25.4 23.3-13 12.7-23.9 23.6-24.2 24.1-0.3 0.4-1 0.7-1.6 0.5-0.7-0.2-12.1-11-25.4-23.9-13.3-12.9-25-23.6-26.1-23.8-1.3-0.2-4.5 2.2-10 7.5z"
      ></path></svg
    ></button
  >
  <h2>Table of Contents</h2>
  <div id="tableOfContentsContainer"></div>
</div>

<BaseLayout pageTitle={frontmatter.title}>
  <div id="blog">
  <div id="overlay"></div>
    <article>
      <h1 id="blog-heading">{frontmatter.title}</h1>
      <p id="blog-meta">Written by {frontmatter.author} on {frontmatter.pubDate.slice(0, 10)}</p>
      <slot />

      <footer id="blog-footer">
        <h2>Tags</h2>
        <div class="tags-layout">
          {
            frontmatter.tags.map((tag) => (
              <p class="tag">
                <a href={`/portfolio-site/tags/${tag}`}>{tag}</a>
              </p>
            ))
          }
        </div>
      </footer>
    </article>
  </div>
  <script>
window.addEventListener("load", function () {
    let openModalButton = document.getElementById("openModalButton");
    let modalContainer = document.getElementById("modalContainer");
    let closeModalButton = document.getElementById("closeModalButton");
    let overlay = document.getElementById("overlay");

    function toggleModal(display) {
        modalContainer.style.display = display ? "block" : "none";
        overlay.style.display = display ? "block" : "none";
    }

    function closeModal() {
        toggleModal(false);
    }

    openModalButton.addEventListener("click", () => toggleModal(true));
    closeModalButton.addEventListener("click", closeModal);
    overlay.addEventListener("click", closeModal);

    function generateTableOfContents() {
        let headings = Array.from(document.querySelectorAll("h2[id], h3[id], h4[id], h5[id], h6[id]"));

        function createTableOfContents(headings) {
            let tableOfContents = document.createElement("ul");
            tableOfContents.classList.add("tableOfContentsNavbar");
            let currentTableOfContents = tableOfContents;
            let previousLevel = 2;

            headings.forEach((heading) => {
                let level = parseInt(heading.tagName[1]);

                if (level > previousLevel) {
                    currentTableOfContents = (function createSubMenu(parentTableOfContents) {
                        let subMenu = document.createElement("ul");
                        subMenu.classList.add(
                            parentTableOfContents.classList.contains("tableOfContentsNavbar") ? "sub-menu" : "nested-sub-menu"
                        );
                        parentTableOfContents.lastElementChild.appendChild(subMenu);
                        return subMenu;
                    })(currentTableOfContents);
                } else if (level < previousLevel) {
                    currentTableOfContents = (function getParentTableOfContents(currentTableOfContents, difference) {
                        let parentTableOfContents = currentTableOfContents.parentElement.parentElement;
                        for (let i = 1; i < difference; i++) {
                            parentTableOfContents = parentTableOfContents.parentElement.parentElement;
                        }
                        return parentTableOfContents;
                    })(currentTableOfContents, previousLevel - level);
                }

                let listItem = (function createNavItem(heading) {
                    let listItem = document.createElement("li");
                    listItem.classList.add("tableOfContentsNavItem");
                    let link = (function createNavLink(heading) {
                        let link = document.createElement("a");
                        link.classList.add("tableOfContentsNavLink");
                        link.textContent = heading.textContent;
                        link.href = `#${heading.id}`;
                        link.addEventListener("click", closeModal);
                        return link;
                    })(heading);
                    listItem.appendChild(link);
                    return listItem;
                })(heading);

                currentTableOfContents.appendChild(listItem);
                previousLevel = level;
            });

            return tableOfContents;
        }

        let tableOfContentsContainer = document.getElementById("tableOfContentsContainer");
        tableOfContentsContainer.appendChild(createTableOfContents(headings));
    }

    // Delay the execution of generateTableOfContents by a small interval to ensure that the DOM is fully loaded.
    setTimeout(generateTableOfContents, 100);
});

  </script>
</BaseLayout>
